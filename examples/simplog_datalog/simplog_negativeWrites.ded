//node("a","a")@1 ;
node("a","b")@1 ;
node("a","c")@1 ;
node("b","a")@1 ;
node("b","b")@1 ;
node("b","c")@1 ;
node("c","a")@1 ;
node("c","b")@1 ;
node("c","c")@1 ;
bcast("a","hello")@1 ;

// ---------------------------------------- //


pre(X,Pl)  :- log(X,Pl), not_bcast_wrt_pre(X,Pl)@1 ;
post(X,Pl) :- log(X,Pl), not_missing_log(_,Pl) ; // V is for 'var' b/c not handling wildcards correctly?

node(Node,Neighbor)@next :- node(Node,Neighbor) ;

log(Node,Pload)@next   :- log(Node,Pload) ;
log(Node2,Pload)@async :- bcast(Node1,Pload),node(Node1,Node2) ;
log(Node,Pload)        :- bcast(Node,Pload) ;

missing_log(A,Pl) :- log(X,Pl),node(X,A),notin log(A,Pl) ;


// ================= //
//  NOT_MISSING_LOG  //
// ================= //
not_missing_log(B,Pl) :- not_log(X,Pl), node(X,B),                     not_log(B,Pl) ;
not_missing_log(C,Pl) :- log(X,Pl),     not_node_wrt_missing_log(X,C), not_log(C,Pl) ; 
not_missing_log(A,Pl) :- log(X,Pl),     node(X,A),                     log(A,Pl) ;

// ========= //
//  NOT_LOG  //
// ========= //

// SENTIMENT :
//not_log_next(Node,Pload)@next   :- not_log(Node,Pload) ;
//not_log_async_one(Node2,Pload)@async :- not_bcast_wrt_not_log_async(Node1,Pload), node(Node1,Node2) ;
//not_log_async_two(Node2,Pload)@async :- bcast(Node1,Pload),                       not_node_wrt_bcast(Node1,Node2) ;
//not_log_deduc(Node,Pload)        :- not_bcast_wrt_not_log_deduc(Node,Pload) ;
//not_log(X,Y) :- not_log_next(X,Y),not_log_async_one(X,Y),not_log_async_two(X,Y),not_log_deduc(X,Y) ;

//old version
//not_log(Node,Pload)@next   :- not_log(Node,Pload) ;
//not_log(Node2,Pload)@async :- not_bcast_wrt_not_log_async(Node1,Pload), node(Node1,Node2) ;
//not_log(Node2,Pload)@async :- bcast(Node1,Pload),                       not_node_wrt_not_log(Node1,Node2) ;
//not_log(Node,Pload)        :- not_bcast_wrt_not_log_deduc(Node,Pload) ;


//simplified rewrites of positive log relation
//log(N,P,Time) :- log(N,P,SndTime), clock(N,_,SndTime,Time); //works only because DelivTime = SndTime+1
//log(N,P,Time) :- bcast(Node1,P,SndTime),node(Node1,N,SndTime), clock(Node1,N,SndTime,Time);
//log(N,P,Time) :- bcast(N,P,Time), clock(N,N,Time,_);

// yucky rewrite
//not_log(N,P,Time) :- not_log(N,P,Time),clock(N,_SndTime,Time),not_bcast_wrt_not_log_async(Node1,p),node(Node1,N,SndTime),bcast(Node1,P,SndTime),not_node_wrt_not_log(Node1,N,SndTime),clock(Node1,N,SndTime,Time),not_bcast_wrt_not_log_deduc(N,P),clock(N,N,Time,_) ;

// good rewrite?
not_log(N,P,SndTime)@rewritten :- not_bcast_wrt_not_log(Node1,P,SndTime),node(Node1,N,SndTime),clock(Node1,N,_,SndTime),not_bcast_wrt_not_log(N,P,SndTime), clock(N,N,SndTime,_) ;
not_log(N,P,SndTime)@rewritten :- bcast(Node1,P,SndTime),not_node_wrt_not_log(Node1,N,SndTime),clock(Node1,N,_,SndTime),not_bcast_wrt_not_log(N,P,SndTime), clock(N,N,SndTime,_) ;


// ---------------------------------------- //

// =================== //
//  NOT_BCAST WRT PRE  //
// =================== //
not_bcast_wrt_pre( "a", "hello")@2 ;
not_bcast_wrt_pre( "b", "hello")@1 ;
not_bcast_wrt_pre( "c", "hello")@1 ;
not_bcast_wrt_pre(X,Y)@next :- not_bcast_wrt_pre(X,Y) ;

// ======================= //
//  NOT_BCAST WRT NOT_LOG  //
// ======================= //
not_bcast_wrt_not_log( "a", "hello", 2 ) ;
not_bcast_wrt_not_log( "a", "hello", 3 ) ;
not_bcast_wrt_not_log( "a", "hello", 4 ) ;
not_bcast_wrt_not_log( "a", "hello", 5 ) ;
not_bcast_wrt_not_log( "b", "hello", 1 ) ;
not_bcast_wrt_not_log( "b", "hello", 2 ) ;
not_bcast_wrt_not_log( "b", "hello", 3 ) ;
not_bcast_wrt_not_log( "b", "hello", 4 ) ;
not_bcast_wrt_not_log( "b", "hello", 5 ) ;
not_bcast_wrt_not_log( "c", "hello", 1 ) ;
not_bcast_wrt_not_log( "c", "hello", 2 ) ;
not_bcast_wrt_not_log( "c", "hello", 3 ) ;
not_bcast_wrt_not_log( "c", "hello", 4 ) ;
not_bcast_wrt_not_log( "c", "hello", 5 ) ;

// ====================== //
//  NOT_NODE WRT NOT_LOG  //
// ====================== //
not_node_wrt_not_log( "a", "a" )@1 ;

// ========================== //
//  NOT_NODE WRT MISSING_LOG  //
// ========================== //
not_node_wrt_missing_log( "a", "a", 1 ) ;


