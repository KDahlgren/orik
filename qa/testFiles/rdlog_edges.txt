pydot.Edge("rule->node_prov8(['a', 'b', '1'])","fact->node_edb(['a', 'b', '1'])")
pydot.Edge("goal->node(['a', 'b', '1'])","rule->node_prov8(['a', 'b', '1'])")
pydot.Edge("rule->bcast_prov9(['a', 'hello', '1'])","fact->bcast_edb(['a', 'hello', '1'])")
pydot.Edge("goal->bcast(['a', 'hello', '1'])","rule->bcast_prov9(['a', 'hello', '1'])")
pydot.Edge("rule->log_prov6(['b', 'hello', '2', 'a', '1'])","goal->node(['a', 'b', '1'])")
pydot.Edge("rule->log_prov6(['b', 'hello', '2', 'a', '1'])","fact->clock(['a', 'b', '1', '2'])")
pydot.Edge("rule->log_prov6(['b', 'hello', '2', 'a', '1'])","goal->bcast(['a', 'hello', '1'])")
pydot.Edge("goal->log(['b', 'hello', '2'])","rule->log_prov6(['b', 'hello', '2', 'a', '1'])")
pydot.Edge("rule->log_prov5(['b', 'hello', '3', '2'])","fact->clock(['b', '_', '2', '3'])")
pydot.Edge("rule->log_prov5(['b', 'hello', '3', '2'])","goal->log(['b', 'hello', '2'])")
pydot.Edge("rule->node_prov4(['a', 'b', '2', '1'])","fact->clock(['a', '_', '1', '2'])")
pydot.Edge("rule->node_prov4(['a', 'b', '2', '1'])","goal->node(['a', 'b', '1'])")
pydot.Edge("goal->node(['a', 'b', '2'])","rule->node_prov4(['a', 'b', '2', '1'])")
pydot.Edge("rule->bcast_prov3(['a', 'hello', '2', '1'])","goal->bcast(['a', 'hello', '1'])")
pydot.Edge("rule->bcast_prov3(['a', 'hello', '2', '1'])","fact->clock(['a', '_', '1', '2'])")
pydot.Edge("goal->bcast(['a', 'hello', '2'])","rule->bcast_prov3(['a', 'hello', '2', '1'])")
pydot.Edge("rule->log_prov6(['b', 'hello', '3', 'a', '2'])","goal->node(['a', 'b', '2'])")
pydot.Edge("rule->log_prov6(['b', 'hello', '3', 'a', '2'])","fact->clock(['a', 'b', '2', '3'])")
pydot.Edge("rule->log_prov6(['b', 'hello', '3', 'a', '2'])","goal->bcast(['a', 'hello', '2'])")
pydot.Edge("goal->log(['b', 'hello', '3'])","rule->log_prov5(['b', 'hello', '3', '2'])")
pydot.Edge("goal->log(['b', 'hello', '3'])","rule->log_prov6(['b', 'hello', '3', 'a', '2'])")
pydot.Edge("rule->log_prov5(['b', 'hello', '4', '3'])","fact->clock(['b', '_', '3', '4'])")
pydot.Edge("rule->log_prov5(['b', 'hello', '4', '3'])","goal->log(['b', 'hello', '3'])")
pydot.Edge("rule->node_prov4(['a', 'b', '3', '2'])","fact->clock(['a', '_', '2', '3'])")
pydot.Edge("rule->node_prov4(['a', 'b', '3', '2'])","goal->node(['a', 'b', '2'])")
pydot.Edge("goal->node(['a', 'b', '3'])","rule->node_prov4(['a', 'b', '3', '2'])")
pydot.Edge("rule->bcast_prov3(['a', 'hello', '3', '2'])","goal->bcast(['a', 'hello', '2'])")
pydot.Edge("rule->bcast_prov3(['a', 'hello', '3', '2'])","fact->clock(['a', '_', '2', '3'])")
pydot.Edge("goal->bcast(['a', 'hello', '3'])","rule->bcast_prov3(['a', 'hello', '3', '2'])")
pydot.Edge("rule->log_prov6(['b', 'hello', '4', 'a', '3'])","goal->node(['a', 'b', '3'])")
pydot.Edge("rule->log_prov6(['b', 'hello', '4', 'a', '3'])","fact->clock(['a', 'b', '3', '4'])")
pydot.Edge("rule->log_prov6(['b', 'hello', '4', 'a', '3'])","goal->bcast(['a', 'hello', '3'])")
pydot.Edge("goal->log(['b', 'hello', '4'])","rule->log_prov5(['b', 'hello', '4', '3'])")
pydot.Edge("goal->log(['b', 'hello', '4'])","rule->log_prov6(['b', 'hello', '4', 'a', '3'])")
pydot.Edge("rule->post_prov2(['b', 'hello', '4'])","goal->_NOT_missing_log(['_', 'hello', '4'])")
pydot.Edge("rule->post_prov2(['b', 'hello', '4'])","goal->log(['b', 'hello', '4'])")
pydot.Edge("goal->post(['b', 'hello', '4'])","rule->post_prov2(['b', 'hello', '4'])")
pydot.Edge("rule->log_prov7(['a', 'hello', '1'])","goal->bcast(['a', 'hello', '1'])")
pydot.Edge("goal->log(['a', 'hello', '1'])","rule->log_prov7(['a', 'hello', '1'])")
pydot.Edge("rule->log_prov5(['a', 'hello', '2', '1'])","fact->clock(['a', '_', '1', '2'])")
pydot.Edge("rule->log_prov5(['a', 'hello', '2', '1'])","goal->log(['a', 'hello', '1'])")
pydot.Edge("rule->log_prov7(['a', 'hello', '2'])","goal->bcast(['a', 'hello', '2'])")
pydot.Edge("goal->log(['a', 'hello', '2'])","rule->log_prov5(['a', 'hello', '2', '1'])")
pydot.Edge("goal->log(['a', 'hello', '2'])","rule->log_prov7(['a', 'hello', '2'])")
pydot.Edge("rule->log_prov5(['a', 'hello', '3', '2'])","fact->clock(['a', '_', '2', '3'])")
pydot.Edge("rule->log_prov5(['a', 'hello', '3', '2'])","goal->log(['a', 'hello', '2'])")
pydot.Edge("rule->log_prov7(['a', 'hello', '3'])","goal->bcast(['a', 'hello', '3'])")
pydot.Edge("goal->log(['a', 'hello', '3'])","rule->log_prov5(['a', 'hello', '3', '2'])")
pydot.Edge("goal->log(['a', 'hello', '3'])","rule->log_prov7(['a', 'hello', '3'])")
pydot.Edge("rule->log_prov5(['a', 'hello', '4', '3'])","fact->clock(['a', '_', '3', '4'])")
pydot.Edge("rule->log_prov5(['a', 'hello', '4', '3'])","goal->log(['a', 'hello', '3'])")
pydot.Edge("rule->bcast_prov3(['a', 'hello', '4', '3'])","goal->bcast(['a', 'hello', '3'])")
pydot.Edge("rule->bcast_prov3(['a', 'hello', '4', '3'])","fact->clock(['a', '_', '3', '4'])")
pydot.Edge("goal->bcast(['a', 'hello', '4'])","rule->bcast_prov3(['a', 'hello', '4', '3'])")
pydot.Edge("rule->log_prov7(['a', 'hello', '4'])","goal->bcast(['a', 'hello', '4'])")
pydot.Edge("goal->log(['a', 'hello', '4'])","rule->log_prov5(['a', 'hello', '4', '3'])")
pydot.Edge("goal->log(['a', 'hello', '4'])","rule->log_prov7(['a', 'hello', '4'])")
pydot.Edge("rule->post_prov2(['a', 'hello', '4'])","goal->_NOT_missing_log(['_', 'hello', '4'])")
pydot.Edge("rule->post_prov2(['a', 'hello', '4'])","goal->log(['a', 'hello', '4'])")
pydot.Edge("goal->post(['a', 'hello', '4'])","rule->post_prov2(['a', 'hello', '4'])")
pydot.Edge("rule->node_prov8(['a', 'c', '1'])","fact->node_edb(['a', 'c', '1'])")
pydot.Edge("goal->node(['a', 'c', '1'])","rule->node_prov8(['a', 'c', '1'])")
pydot.Edge("rule->log_prov6(['c', 'hello', '2', 'a', '1'])","goal->node(['a', 'c', '1'])")
pydot.Edge("rule->log_prov6(['c', 'hello', '2', 'a', '1'])","fact->clock(['a', 'c', '1', '2'])")
pydot.Edge("rule->log_prov6(['c', 'hello', '2', 'a', '1'])","goal->bcast(['a', 'hello', '1'])")
pydot.Edge("goal->log(['c', 'hello', '2'])","rule->log_prov6(['c', 'hello', '2', 'a', '1'])")
pydot.Edge("rule->log_prov5(['c', 'hello', '3', '2'])","fact->clock(['c', '_', '2', '3'])")
pydot.Edge("rule->log_prov5(['c', 'hello', '3', '2'])","goal->log(['c', 'hello', '2'])")
pydot.Edge("rule->node_prov4(['a', 'c', '2', '1'])","fact->clock(['a', '_', '1', '2'])")
pydot.Edge("rule->node_prov4(['a', 'c', '2', '1'])","goal->node(['a', 'c', '1'])")
pydot.Edge("goal->node(['a', 'c', '2'])","rule->node_prov4(['a', 'c', '2', '1'])")
pydot.Edge("rule->log_prov6(['c', 'hello', '3', 'a', '2'])","goal->node(['a', 'c', '2'])")
pydot.Edge("rule->log_prov6(['c', 'hello', '3', 'a', '2'])","fact->clock(['a', 'c', '2', '3'])")
pydot.Edge("rule->log_prov6(['c', 'hello', '3', 'a', '2'])","goal->bcast(['a', 'hello', '2'])")
pydot.Edge("goal->log(['c', 'hello', '3'])","rule->log_prov5(['c', 'hello', '3', '2'])")
pydot.Edge("goal->log(['c', 'hello', '3'])","rule->log_prov6(['c', 'hello', '3', 'a', '2'])")
pydot.Edge("rule->log_prov5(['c', 'hello', '4', '3'])","fact->clock(['c', '_', '3', '4'])")
pydot.Edge("rule->log_prov5(['c', 'hello', '4', '3'])","goal->log(['c', 'hello', '3'])")
pydot.Edge("rule->node_prov4(['a', 'c', '3', '2'])","fact->clock(['a', '_', '2', '3'])")
pydot.Edge("rule->node_prov4(['a', 'c', '3', '2'])","goal->node(['a', 'c', '2'])")
pydot.Edge("goal->node(['a', 'c', '3'])","rule->node_prov4(['a', 'c', '3', '2'])")
pydot.Edge("rule->log_prov6(['c', 'hello', '4', 'a', '3'])","goal->node(['a', 'c', '3'])")
pydot.Edge("rule->log_prov6(['c', 'hello', '4', 'a', '3'])","fact->clock(['a', 'c', '3', '4'])")
pydot.Edge("rule->log_prov6(['c', 'hello', '4', 'a', '3'])","goal->bcast(['a', 'hello', '3'])")
pydot.Edge("goal->log(['c', 'hello', '4'])","rule->log_prov5(['c', 'hello', '4', '3'])")
pydot.Edge("goal->log(['c', 'hello', '4'])","rule->log_prov6(['c', 'hello', '4', 'a', '3'])")
pydot.Edge("rule->post_prov2(['c', 'hello', '4'])","goal->_NOT_missing_log(['_', 'hello', '4'])")
pydot.Edge("rule->post_prov2(['c', 'hello', '4'])","goal->log(['c', 'hello', '4'])")
pydot.Edge("goal->post(['c', 'hello', '4'])","rule->post_prov2(['c', 'hello', '4'])")
pydot.Edge("goal->FinalState([])","goal->post(['b', 'hello', '4'])")
pydot.Edge("goal->FinalState([])","goal->post(['a', 'hello', '4'])")
pydot.Edge("goal->FinalState([])","goal->post(['c', 'hello', '4'])")
